import sqlite3
import tkinter as tk
import tkinter.messagebox as messagebox

class AddressBook:
    def __init__(self, master):
        self.master = master
        master.title("Address Book")
        # Create database connection
        self.conn = sqlite3.connect('addressbook.db')
        self.cursor = self.conn.cursor()
        
        # Create address book table if not exists
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS contacts (
                id INTEGER PRIMARY KEY,
                name TEXT,
                email TEXT,
                phone TEXT
            )
        ''')
        self.conn.commit()
        
        # Create widgets
        self.name_label = tk.Label(master, text="Name:")
        self.name_label.grid(row=0, column=0)
        self.name_entry = tk.Entry(master)
        self.name_entry.grid(row=0, column=1)
        
        self.email_label = tk.Label(master, text="Email:")
        self.email_label.grid(row=1, column=0)
        self.email_entry = tk.Entry(master)
        self.email_entry.grid(row=1, column=1)
        
        self.phone_label = tk.Label(master, text="Phone:")
        self.phone_label.grid(row=2, column=0)
        self.phone_entry = tk.Entry(master)
        self.phone_entry.grid(row=2, column=1)
        
        self.add_button = tk.Button(master, text="Add", command=self.add_contact)
        self.add_button.grid(row=3, column=0, columnspan=2)
        
        self.contacts_listbox = tk.Listbox(master)
        self.contacts_listbox.grid(row=4, column=0, columnspan=2)
        
        self.delete_button = tk.Button(master, text="Delete", command=self.delete_contact)
        self.delete_button.grid(row=5, column=0, columnspan=2)
        
        self.search_label = tk.Label(master, text="Search:")
        self.search_label.grid(row=6, column=0)
        self.search_entry = tk.Entry(master)
        self.search_entry.grid(row=6, column=1)

        self.search_button = tk.Button(master, text="Search", command=self.search_contact)
        self.search_button.grid(row=7, column=0, columnspan=2)

        
        # Populate contacts listbox
        self.populate_listbox()
        
    def populate_listbox(self):
        self.contacts_listbox.delete(0, tk.END)
        self.cursor.execute("SELECT * FROM contacts ORDER BY name")
        for row in self.cursor.fetchall():
            self.contacts_listbox.insert(tk.END, f"{row[1]} - {row[2]} - {row[3]}")
    
    def add_contact(self):
        name = self.name_entry.get()
        email = self.email_entry.get()
        phone = self.phone_entry.get()
        self.cursor.execute("INSERT INTO contacts (name, email, phone) VALUES (?, ?, ?)", (name, email, phone))
        self.conn.commit()
        self.populate_listbox()
        self.name_entry.delete(0, tk.END)
        self.email_entry.delete(0, tk.END)
        self.phone_entry.delete(0, tk.END)
    
    def delete_contact(self):
        selected_index = self.contacts_listbox.curselection()
        if selected_index:
            selected_contact = self.contacts_listbox.get(selected_index)
            name, email, phone = selected_contact.split(" - ")
            self.cursor.execute("DELETE FROM contacts WHERE name=? AND email=? AND phone=?", (name, email, phone))
            self.conn.commit()
            self.populate_listbox()
            

    def search_contact(self):
        search_query = self.search_entry.get()
        if search_query:
            self.contacts_listbox.delete(0, tk.END)
            self.cursor.execute("SELECT * FROM contacts WHERE name LIKE ? OR email LIKE ? OR phone LIKE ? ORDER BY name", ('%'+search_query+'%', '%'+search_query+'%', '%'+search_query+'%'))
            results = self.cursor.fetchall()
            if results:
                for row in results:
                    self.contacts_listbox.insert(tk.END, f"{row[1]} - {row[2]} - {row[3]}")
                messagebox.showinfo("Search Results", f"Found {len(results)} results for '{search_query}'")
            else:
                messagebox.showwarning("No Results", f"No results found for '{search_query}'")
        else:
            self.populate_listbox()



root = tk.Tk()
app = AddressBook(root)
root.mainloop()
